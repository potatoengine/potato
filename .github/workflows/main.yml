name: Build

on:
  push:
    branches:
      - master
  pull_request: []

jobs:
  build-windows:
    strategy:
      matrix:
        config: [ Debug, Release ]

    name: 'Windows (${{ matrix.config }} msvc)'
    runs-on: 'windows-latest'

    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Set Environment
        run: echo "::set-env name=DEPS::$Env:HOME\deps"
      - name: Install SDL2 SDK
        run: |
          curl -s -S -o SDL2-devel-2.0.9-VC.zip -L https://www.libsdl.org/release/SDL2-devel-2.0.9-VC.zip
          unzip SDL2-devel-2.0.9-VC.zip -d "$Env:DEPS"
          echo "::set-env name=SDL2DIR::$Env:DEPS\SDL2-2.0.9"
      - name: Install Assimp SDK
        run: |
          curl -s -S -o assimp-4.1.0.zip -L https://grimmdeps.blob.core.windows.net/deps/assimp-4.1.0.zip
          unzip assimp-4.1.0.zip -d "$Env:DEPS"
      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Setup VS Environment
        uses: seanmiddleditch/gha-setup-vsdevenv@master
      - name: Configure
        env:
          CXXFLAGS: /W3 /WX
          CXX: cl.exe
          CC: cl.exe
        run: |
          mkdir build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE:STRING=${{ matrix.config }} -DBUILD_SHARED_LIBS=YES -DASSIMP_ROOT_DIR:PATH="$Env:DEPS/assimp-4.1.0" ..
      - name: Build
        run: cmake --build build --parallel
      - name: Test
        run: |
          cd build
          ctest -T test -R potato --verbose

  build-ubuntu:
    strategy:
      matrix:
        config: [ 'Debug', 'Release' ]
        cxx: [ 'g++-9', 'clang++-10' ]
        include:
          - cxx: g++-9
            cc: gcc-9
            cxxflags: -Wall -Werror -Wno-error=maybe-uninitialized
            packages: g++-9 gcc-9 libstdc++-9-dev
          - cxx: clang++-10
            cc: clang-10
            cxxflags: -Wall -Werror -stdlib=libc++
            packages: clang-10 libc++-10-dev libc++abi-10-dev
    
    name: 'Ubuntu (${{ matrix.config }} ${{ matrix.cxx }})'
    runs-on: 'ubuntu-latest'

    steps:
      - uses: actions/checkout@master
      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Apt update
        run: sudo apt-get -yq update
      - name: Install uuid-dev
        run: sudo apt-get -yq install uuid-dev
      - name: Install toolchain
        run: sudo apt-get -yq install ${{ matrix.packages }}
        if: success() && matrix.packages != ''
      - name: Configure
        env:
          CXXFLAGS: '${{ matrix.cxxflags }}'
          CXX: '${{ matrix.cxx }}'
          CC: '${{ matrix.cc }}'
        run: |
          mkdir -p build
          cd build
          cmake -G Ninja -DBUILD_SHARED_LIBS=OFF "-DCMAKE_BUILD_TYPE:STRING=${{ matrix.config }}" ..
      - name: Build
        run: cmake --build build --parallel
      - name: Test
        run: |
          cd build
          ctest -T test -R potato --verbose

  doxygen:
    name: Documentation
    runs-on: 'ubuntu-latest'

    steps:
      - name: Install Doxygen
        run: sudo apt-get -yq install doxygen
      - name: Checkout
        uses: actions/checkout@master
      - name: Install uuid-dev
        run: |
          sudo apt-get -yq update
          sudo apt-get -yq install uuid-dev
      - name: Configure
        run: |
          mkdir build
          cd build
          cmake -DUP_BUILD_DOCS=ON ..
      - name: Build Docs
        run: cmake --build build --target doxygen
      - name: Post Artifacts
        uses: actions/upload-artifact@master
        with:
          name: html-docs
          path: build/documentation/doxygen/html

  build-all:
    name: All
    needs: [ 'build-windows', 'build-ubuntu', 'doxygen' ]
    runs-on: 'ubuntu-latest'

    steps:
      - name: Determine Branch
        id: branch
        shell: bash
        run: 'echo ::set-output name=branch::$(echo "${GITHUB_BASE_REF:-GITHUB_REF}" | rev | cut -d/ -f1 | rev)'
      - name: Fetch Documentation Artifacts
        uses: actions/download-artifact@master
        with:
          name: html-docs
          path: html
        if: success() && github.event == 'push'
      - name: Publish to potatoengine.github.io
        uses: seanmiddleditch/gha-publish-to-git@master
        with:
          repository: potatoengine/potatoengine.github.io
          branch: master
          github_token: '${{ secrets.GITHUB_TOKEN  }}'
          github_pat: '${{ secrets.GH_PAT }}'
          source_folder: html
          target_folder: '${{ steps.branch.outputs.branch }}'
        if: success() && github.event == 'push'
      - run: echo "Build Complete"
