name: Build

on:
  push:
    branches:
      - master
  pull_request: {}

jobs:
  build-windows:
    strategy:
      fail-fast: false
      matrix:
        config: [ Debug, Release ]

    name: 'Windows (${{ matrix.config }} msvc)'
    runs-on: 'windows-latest'

    steps:
      - uses: actions/checkout@master
        with:
          lfs: true
      - name: Set Environment
        run: echo "DEPS=$Env:HOME\deps" | Out-File -FilePath "$Env:GITHUB_ENV" -Append
      - name: Install Problem Matchers
        uses: Trass3r/setup-cpp@v1
        if: matrix.config == 'Debug'
      - name: Install SDL2 SDK
        run: |
          curl -s -S -o SDL2-2.0.12-win-x64.7z -L https://github.com/potatoengine/win-sdks/releases/download/sdl2-2.0.12-x64/SDL2-2.0.12-win-x64.7z
          7z x -o"$Env:DEPS" SDL2-2.0.12-win-x64.7z 
          echo "SDL2DIR=$Env:DEPS\SDL2-2.0.12-win-x64" | Out-File -FilePath "$Env:GITHUB_ENV" -Append
      - name: Install Assimp SDK
        run: |
          curl -s -S -o assimp-5.0.1-win-x64.7z -L https://github.com/potatoengine/win-sdks/releases/download/assimp-5.0.1-x64/assimp-5.0.1-win-x64.7z
          7z x -o"$Env:DEPS" assimp-5.0.1-win-x64.7z
          echo "ASSIMPDIR=$Env:DEPS\assimp-5.0.1-win-x64" | Out-File -FilePath "$Env:GITHUB_ENV" -Append
          ls -R $Env:DEPS
      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3
      - name: Setup VS Environment
        uses: seanmiddleditch/gha-setup-vsdevenv@v3
      - name: Configure
        env:
          CXX: cl.exe
          CC: cl.exe
          CXXFLAGS: /FC
        run: |
          mkdir build
          cmake -S . -B build -G Ninja -DUP_CXXFLAGS:STRING="/W3 /WX /w34295 /w34189" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.config }} -DBUILD_SHARED_LIBS=YES
      - name: Build
        run: cmake --build build --parallel -- -k 0 -v
      - name: Test
        run: |
          cd build
          ctest -T test -R potato --verbose
      - name: Build Resources
        run: cmake --build build --target potato_convert_all

  build-ubuntu:
    strategy:
      matrix:
        config: [ 'Debug', 'Release' ]
        cxx: [ 'g++-10', 'clang++-11' ]
        include:
          - cxx: g++-10
            cc: gcc-10
            cxxflags: -fcoroutines
            warnings: -Wall -Werror -Wno-volatile -Wno-maybe-uninitialized -Wno-deprecated-enum-enum-conversion # GLM triggers volatile, Tracy triggers maybe-unitialized, imgui triggers deprecated-enum-enum-conversion
            packages: g++-10 gcc-10 libstdc++-10-dev
          - cxx: clang++-11
            cc: clang-11
            cxxflags: -stdlib=libc++ -fdiagnostics-absolute-paths
            warnings: -Wall -Werror -Wno-deprecated-volatile -Wno-deprecated-enum-enum-conversion # GLM triggers deprecated-volatile, imgui triggers deprecated-enum-enum-conversion
            packages: clang-11 libc++-11-dev libc++abi-11-dev
    
    name: 'Ubuntu (${{ matrix.config }} ${{ matrix.cxx }})'
    runs-on: 'ubuntu-20.04'

    steps:
      - name: Apt update
        run: sudo apt-get -yq update
      - name: Install libraries
        run: sudo apt-get -yq install uuid-dev libsdl2-dev libassimp-dev libuv1-dev
      - name: Install toolchain
        run: sudo apt-get -yq install cmake ${{ matrix.packages }}
      - uses: actions/checkout@master
        with:
          lfs: true
      - name: Install Problem Matchers
        uses: Trass3r/setup-cpp@v1
        if: matrix.config == 'Debug'
      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3
      - name: Configure
        env:
          CXXFLAGS: '${{ matrix.cxxflags }}'
          CXX: '${{ matrix.cxx }}'
          CC: '${{ matrix.cc }}'
        run: |
          mkdir -p build
          cmake -S . -B build -G Ninja -DUP_CXXFLAGS:STRING="${{ matrix.warnings }}" -DBUILD_SHARED_LIBS=OFF "-DCMAKE_BUILD_TYPE:STRING=${{ matrix.config }}" ..
      - name: Build
        run: cmake --build build --parallel -- -k 0 -v
      - name: Test
        run: |
          cd build
          ctest -T test -R potato --verbose
      - name: Build Resources
        run: cmake --build build --target potato_convert_all

  clang-format:
    name: 'Clang Format'
    runs-on: 'ubuntu-20.04'

    steps:
      - name: Apt update
        run: sudo apt-get -yq update
      - name: Install toolchain
        run: sudo apt-get -yq install clang-format-11
      - uses: actions/checkout@master
      - name: Check Format
        run: python3 ./scripts/tools/run-clang-format.py -r --clang-format-executable clang-format-11 --exclude ./external --extensions h,cpp,cc ./source

  clang-tidy:
    name: 'Clang Tidy'
    runs-on: 'ubuntu-20.04'

    steps:
      - name: Apt update
        run: sudo apt-get -yq update
      - name: Install toolchain
        run: |
          sudo apt-get remove libllvm10
          sudo apt-get -yq install cmake clang++-11 clang-tidy-11 libc++-11-dev libc++abi-11-dev
      - name: Install libraries
        run: sudo apt-get -yq install uuid-dev libsdl2-dev libassimp-dev libuv1-dev
      - uses: actions/checkout@master
        with:
          lfs: true
      - name: Install Problem Matchers
        uses: Trass3r/setup-cpp@v1
      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3
      - name: Configure
        env:
          CXXFLAGS: -stdlib=libc++ -fdiagnostics-absolute-paths
          CXX: clang++-11
          CC: clang-11
        run: |
          mkdir -p build
          cmake -S . -B build -G Ninja "-DUP_CXXFLAGS:STRING=-Wno-deprecated-volatile -Wno-deprecated-enum-enum-conversion" -DBUILD_SHARED_LIBS=OFF "-DUP_CLANG_TIDY:PATH=clang-tidy-11" "-DCMAKE_BUILD_TYPE:STRING=Debug"
      - name: Build
        run: cmake --build build --parallel -- -k 0 -v

  doxygen:
    name: Documentation
    runs-on: 'ubuntu-20.04'

    steps:
      - name: Apt update
        run: sudo apt-get -yq update
      - name: Install Doxygen
        run: sudo apt-get -yq install doxygen
      - name: Install libraries
        run: sudo apt-get -yq install uuid-dev libsdl2-dev libassimp-dev libuv1-dev
      - name: Install toolchain
        run: sudo apt-get -yq install cmake g++-10 gcc-10 libstdc++-10-dev
      - uses: actions/checkout@master
        with:
          lfs: true
      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3
      - name: Configure
        env:
          CXX: 'g++-10'
          CC: 'gcc-10'
        run: |
          mkdir build
          cmake -S . -B build -G Ninja -DUP_BUILD_DOCS=ON
      - name: Build Docs
        run: cmake --build build --target doxygen
      - name: Post Artifacts
        uses: actions/upload-artifact@master
        with:
          name: html-docs
          path: build/documentation/doxygen/html

  build-all:
    name: All
    needs: [ 'build-windows', 'build-ubuntu', 'doxygen', 'clang-format', 'clang-tidy' ]
    runs-on: 'ubuntu-latest'

    steps:
      - name: Determine Branch
        id: branch
        shell: bash
        run: 'echo ::set-output name=branch::$(echo "${GITHUB_BASE_REF:-GITHUB_REF}" | rev | cut -d/ -f1 | rev)'
      - name: Fetch Documentation Artifacts
        uses: actions/download-artifact@master
        with:
          name: html-docs
          path: html
        if: success() && github.event == 'push'
      - name: Publish to potatoengine.github.io
        uses: seanmiddleditch/gha-publish-to-git@v2
        with:
          repository: potatoengine/potatoengine.github.io
          branch: master
          github_token: '${{ secrets.GITHUB_TOKEN  }}'
          github_pat: '${{ secrets.GH_PAT }}'
          source_folder: html
          target_folder: '${{ steps.branch.outputs.branch }}'
        if: success() && github.event == 'push'
      - run: echo "Build Complete"
