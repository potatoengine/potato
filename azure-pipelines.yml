trigger:
  batch: true
  branches:
    include:
    - master
    - releases/*
  paths:
    exclude:
    - ci/

jobs:
- job: Windows
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - bash: |
      set -o xtrace
      curl -o SDL.zip -L https://www.libsdl.org/release/SDL2-devel-2.0.9-VC.zip
      unzip SDL.zip -d "${BUILD_SOURCESDIRECTORY}/deps"
      curl -o AssImp.zip -L https://grimmdeps.blob.core.windows.net/deps/vcpkg-export-20190210-170120.zip
      unzip AssImp.zip -d "${BUILD_SOURCESDIRECTORY}/deps"
    displayName: Installing Dependencies
  - script: |
      "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64
      cmake --version
    displayName: Build Information
  - bash: |
      set -o xtrace
      mkdir -p build/shared
      cd build/shared
      cmake -A x64 -DSDL2_PATH:PATH="${BUILD_SOURCESDIRECTORY}/deps/SDL2-2.0.9" -DASSIMP_ROOT_DIR:PATH="${BUILD_SOURCESDIRECTORY}/vcpkg-export-20190210-170120/installed/x64-windows" "${BUILD_SOURCESDIRECTORY}"
    displayName: CMake Configure
  - bash: |
      set -o xtrace
      cmake --build build/shared --config RelWithDebInfo --parallel
    displayName: Build (Release Shared)
  - bash: |
      set -o xtrace
      cd build/shared
      ctest -C RelWithDebInfo -R grimm --verbose
    displayName: Run Tests
  - bash: |
      set -o xtrace
      cmake --build build/shared --config Debug --parallel
    displayName: Build (Debug Shared)
  - bash: |
      set -o xtrace
      mkdir -p build/static
      cd build/static
      cmake -A x64 -DSDL2_PATH:PATH="${BUILD_SOURCESDIRECTORY}/deps/SDL2-2.0.9" -DASSIMP_ROOT_DIR:PATH="${BUILD_SOURCESDIRECTORY}/vcpkg-export-20190210-170120/installed/x64-windows" -DBUILD_SHARED_LIBS=OFF "${BUILD_SOURCESDIRECTORY}"
    displayName: CMake Configure (Static)
  - bash: |
      set -o xtrace
      cmake --build build/static --config RelWithDebInfo --parallel
    displayName: Build (Release Static)
  - bash: |
      set -o xtrace
      cmake --build build/static --config Debug --parallel
    displayName: Build (Debug Static)

- job: Linux
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: Docker@0
    displayName: 'Build Fedora Image'
    inputs:
      azureSubscription: '$(Parameters.azureSubscriptionEndpoint)'
      azureContainerRegistry: '$(Parameters.azureContainerRegistry)'
      dockerFile: 'ci/docker/fedora-build/Dockerfile'
      imageName: '$(Build.Repository.Name):$(Build.SourceBranchName)'
  - task: Docker@1
    displayName: Clang Format
    inputs:
      azureSubscriptionEndpoint: '$(Parameters.azureSubscriptionEndpoint)'
      azureContainerRegistry: '$(Parameters.azureContainerRegistry)'
      command: 'Run an image'
      imageName: '$(Build.Repository.Name):$(Build.SourceBranchName)'
      volumes: '$(Build.SourcesDirectory):/source'
      containerCommand: 'bash /source/ci/scripts/analyze.sh'
      runInBackground: false
      enforceDockerNamingConvention: false
  - task: Docker@1
    displayName: Build (Release)
    inputs:
      azureSubscriptionEndpoint: '$(Parameters.azureSubscriptionEndpoint)'
      azureContainerRegistry: '$(Parameters.azureContainerRegistry)'
      command: 'Run an image'
      imageName: '$(Build.Repository.Name):$(Build.SourceBranchName)'
      volumes: '$(Build.SourcesDirectory):/source'
      containerCommand: 'bash /source/ci/scripts/build.sh RelWithDebInfo'
      runInBackground: false
      enforceDockerNamingConvention: false
  - task: Docker@1
    displayName: Build (Debug)
    inputs:
      azureSubscriptionEndpoint: '$(Parameters.azureSubscriptionEndpoint)'
      azureContainerRegistry: '$(Parameters.azureContainerRegistry)'
      command: 'Run an image'
      imageName: '$(Build.Repository.Name):$(Build.SourceBranchName)'
      volumes: '$(Build.SourcesDirectory):/source'
      containerCommand: 'bash /source/ci/scripts/build.sh Debug'
      runInBackground: false
      enforceDockerNamingConvention: false
# DISABLED - TODO: allow us to reuse an image once its built if the Dockerfile isn't changing
#  - task: Docker@0
#    displayName: 'Publish Fedora Image'
#    inputs:
#      azureSubscription: '$(Parameters.azureSubscriptionEndpoint)'
#      azureContainerRegistry: '$(Parameters.azureContainerRegistry)'
#      action: 'Push an image'
#      imageName: '$(Build.Repository.Name):$(Build.SourceBranchName)'

- job: MacOS
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - bash: |
      set -o xtrace
      sudo xcode-select -switch /Applications/Xcode_10.1.app
      export HOMEBREW_NO_AUTO_UPDATE=1
      brew install sdl2 assimp
    displayName: Installing Dependencies
  - bash: |
      set -o xtrace
      xcode-select --print-path
      clang++ --version
      cmake --version
      brew info llvm
    displayName: Build Information
  - bash: |
      set -o xtrace
      mkdir -p build/RelWithDebInfo
      cd build/RelWithDebInfo
      cmake -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo ../..
    displayName: Configure CMake (Release)
  - bash: |
      set -o xtrace
      cmake --build build/RelWithDebInfo --parallel
    displayName: Build (Release)
  - bash: |
      set -o xtrace
      mkdir -p build/Debug
      cd build/Debug
      cmake -DCMAKE_BUILD_TYPE:STRING=Debug ../..
    displayName: Configure CMake (Debug)
  - bash: |
      set -o xtrace
      cmake --build build/Debug --parallel
    displayName: Build (Debug)
  - script: |
      set -o xtrace
      cd build/RelWithDebInfo
      ctest -R grimm --verbose
    displayName: Run Tests

